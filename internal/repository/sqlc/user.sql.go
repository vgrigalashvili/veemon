// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one

INSERT INTO users (
    id, first_name, last_name, email, password, email_verified
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, created_at, updated_at, deleted_at, first_name, last_name, email, password, role, email_verified
`

type CreateUserParams struct {
	ID            uuid.UUID `json:"id"`
	FirstName     *string   `json:"first_name"`
	LastName      *string   `json:"last_name"`
	Email         string    `json:"email"`
	Password      string    `json:"password"`
	EmailVerified bool      `json:"email_verified"`
}

// ============================================
// QUERIES FOR USER MANAGEMENT
// ============================================
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
		arg.EmailVerified,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.EmailVerified,
	)
	return i, err
}

const read = `-- name: Read :one
SELECT id, created_at, updated_at, deleted_at, first_name, last_name, email, password, role, email_verified
FROM users
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) Read(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, read, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.EmailVerified,
	)
	return i, err
}
