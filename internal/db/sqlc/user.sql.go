// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addUser = `-- name: AddUser :one
INSERT INTO users (
    id, first_name, last_name, email, mobile, password_hash, role, user_type, pin, verified, expires_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
) RETURNING id, created_at, updated_at, deleted_at, role, first_name, last_name, email, mobile, password_hash, pin, verified, user_type, expires_at
`

type AddUserParams struct {
	ID           uuid.UUID        `json:"id"`
	FirstName    pgtype.Text      `json:"first_name"`
	LastName     pgtype.Text      `json:"last_name"`
	Email        pgtype.Text      `json:"email"`
	Mobile       string           `json:"mobile"`
	PasswordHash string           `json:"password_hash"`
	Role         string           `json:"role"`
	UserType     string           `json:"user_type"`
	Pin          pgtype.Int4      `json:"pin"`
	Verified     bool             `json:"verified"`
	ExpiresAt    pgtype.Timestamp `json:"expires_at"`
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) (User, error) {
	row := q.db.QueryRow(ctx, addUser,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Mobile,
		arg.PasswordHash,
		arg.Role,
		arg.UserType,
		arg.Pin,
		arg.Verified,
		arg.ExpiresAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Role,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Mobile,
		&i.PasswordHash,
		&i.Pin,
		&i.Verified,
		&i.UserType,
		&i.ExpiresAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, created_at, updated_at, deleted_at, role, first_name, last_name, email, mobile, password_hash, pin, verified, user_type, expires_at
FROM users
WHERE email = $1 AND deleted_at IS NULL
`

func (q *Queries) GetUserByEmail(ctx context.Context, email pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Role,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Mobile,
		&i.PasswordHash,
		&i.Pin,
		&i.Verified,
		&i.UserType,
		&i.ExpiresAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, created_at, updated_at, deleted_at, role, first_name, last_name, email, mobile, password_hash, pin, verified, user_type, expires_at
FROM users
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Role,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Mobile,
		&i.PasswordHash,
		&i.Pin,
		&i.Verified,
		&i.UserType,
		&i.ExpiresAt,
	)
	return i, err
}

const getUserByMobile = `-- name: GetUserByMobile :one
SELECT id, created_at, updated_at, deleted_at, role, first_name, last_name, email, mobile, password_hash, pin, verified, user_type, expires_at
FROM users
WHERE mobile = $1 AND deleted_at IS NULL
`

func (q *Queries) GetUserByMobile(ctx context.Context, mobile string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByMobile, mobile)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Role,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Mobile,
		&i.PasswordHash,
		&i.Pin,
		&i.Verified,
		&i.UserType,
		&i.ExpiresAt,
	)
	return i, err
}

const getUserRole = `-- name: GetUserRole :one
SELECT role
FROM users
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetUserRole(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRow(ctx, getUserRole, id)
	var role string
	err := row.Scan(&role)
	return role, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, created_at, updated_at, deleted_at, role, first_name, last_name, email, mobile, password_hash, pin, verified, user_type, expires_at
FROM users
WHERE deleted_at IS NULL
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Role,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Mobile,
			&i.PasswordHash,
			&i.Pin,
			&i.Verified,
			&i.UserType,
			&i.ExpiresAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resetUserPin = `-- name: ResetUserPin :exec
UPDATE users
SET pin = $2, updated_at = now()
WHERE id = $1
`

type ResetUserPinParams struct {
	ID  uuid.UUID   `json:"id"`
	Pin pgtype.Int4 `json:"pin"`
}

func (q *Queries) ResetUserPin(ctx context.Context, arg ResetUserPinParams) error {
	_, err := q.db.Exec(ctx, resetUserPin, arg.ID, arg.Pin)
	return err
}

const setupUserRole = `-- name: SetupUserRole :exec
UPDATE users
SET role = $2, updated_at = now()
WHERE id = $1 AND deleted_at IS NULL
`

type SetupUserRoleParams struct {
	ID   uuid.UUID `json:"id"`
	Role string    `json:"role"`
}

func (q *Queries) SetupUserRole(ctx context.Context, arg SetupUserRoleParams) error {
	_, err := q.db.Exec(ctx, setupUserRole, arg.ID, arg.Role)
	return err
}

const softDeleteUser = `-- name: SoftDeleteUser :exec
UPDATE users
SET deleted_at = now()
WHERE id = $1
`

func (q *Queries) SoftDeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, softDeleteUser, id)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET
    first_name = COALESCE($2, first_name),
    last_name = COALESCE($3, last_name),
    email = COALESCE($4, email),
    mobile = COALESCE($5, mobile),
    password_hash = COALESCE($6, password_hash),
    role = COALESCE($7, role),
    user_type = COALESCE($8, user_type),
    pin = COALESCE($9, pin),
    verified = COALESCE($10, verified),
    updated_at = now(),
    expires_at = COALESCE($11, expires_at)
WHERE id = $1 AND deleted_at IS NULL
`

type UpdateUserParams struct {
	ID           uuid.UUID        `json:"id"`
	FirstName    pgtype.Text      `json:"first_name"`
	LastName     pgtype.Text      `json:"last_name"`
	Email        pgtype.Text      `json:"email"`
	Mobile       string           `json:"mobile"`
	PasswordHash string           `json:"password_hash"`
	Role         string           `json:"role"`
	UserType     string           `json:"user_type"`
	Pin          pgtype.Int4      `json:"pin"`
	Verified     bool             `json:"verified"`
	ExpiresAt    pgtype.Timestamp `json:"expires_at"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Mobile,
		arg.PasswordHash,
		arg.Role,
		arg.UserType,
		arg.Pin,
		arg.Verified,
		arg.ExpiresAt,
	)
	return err
}

const userExpiresAt = `-- name: UserExpiresAt :exec
UPDATE users
SET expires_at = $2, updated_at = now()
WHERE id = $1 AND deleted_at IS NULL
`

type UserExpiresAtParams struct {
	ID        uuid.UUID        `json:"id"`
	ExpiresAt pgtype.Timestamp `json:"expires_at"`
}

func (q *Queries) UserExpiresAt(ctx context.Context, arg UserExpiresAtParams) error {
	_, err := q.db.Exec(ctx, userExpiresAt, arg.ID, arg.ExpiresAt)
	return err
}

const verifyUser = `-- name: VerifyUser :exec
UPDATE users
SET verified = true, updated_at = now()
WHERE id = $1
`

func (q *Queries) VerifyUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, verifyUser, id)
	return err
}
