// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type Querier interface {
	// ============================================
	// QUERIES FOR USER MANAGEMENT
	// ============================================
	// Add a new user
	// Inserts a new user record and returns the full record.
	// Parameters: id, first_name, last_name, type, role, email, mobile, password_hash, pin, verified, expires_at
	AddUser(ctx context.Context, arg AddUserParams) (User, error)
	// Retrieve user's role
	// Fetches only the role of a user by ID, excluding soft-deleted users.
	// Parameters: id
	GetUserRole(ctx context.Context, id uuid.UUID) (string, error)
	// List soft-deleted users
	// Fetches a paginated list of soft-deleted users for recovery or auditing.
	// Parameters: limit, offset
	ListSoftDeletedUsers(ctx context.Context, arg ListSoftDeletedUsersParams) ([]User, error)
	// List all active users
	// Fetches a paginated list of active users, ordered by creation date.
	// Parameters: limit, offset
	ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error)
	// Reactivate soft-deleted user
	// Removes the deleted_at timestamp to restore a soft-deleted user.
	// Parameters: id
	ReactivateUser(ctx context.Context, id uuid.UUID) error
	// Reset user's pin
	// Updates a user's PIN with a new value.
	// Parameters: id, pin
	ResetUserPin(ctx context.Context, arg ResetUserPinParams) error
	// Search users
	// Searches for users by name, email, or mobile, excluding soft-deleted users.
	// Parameters: search_term, limit, offset
	SearchUsers(ctx context.Context, arg SearchUsersParams) ([]User, error)
	// Update user's role
	// Updates the role of a user.
	// Parameters: id, role
	SetupUserRole(ctx context.Context, arg SetupUserRoleParams) error
	// Soft delete user
	// Marks a user as deleted by setting the deleted_at timestamp.
	// Parameters: id
	SoftDeleteUser(ctx context.Context, id uuid.UUID) error
	// Update user details
	// Updates user fields only if new values are provided.
	// Parameters: id, first_name, last_name, email, mobile, password_hash, role, type, pin, verified, expires_at
	UpdateUser(ctx context.Context, arg UpdateUserParams) error
	// Update user's expiration time
	// Sets or updates the expiration time for a user.
	// Parameters: id, expires_at
	UserExpiresAt(ctx context.Context, arg UserExpiresAtParams) error
	// Verify user
	// Marks a user as verified.
	// Parameters: id
	VerifyUser(ctx context.Context, id uuid.UUID) error
	// Retrieve user by email
	// Fetches a user by email, excluding soft-deleted users.
	// Parameters: email
	WhoIsBEmail(ctx context.Context, email pgtype.Text) (User, error)
	// Retrieve user by ID
	// Fetches a user by ID, excluding soft-deleted users.
	// Parameters: id
	WhoIsBID(ctx context.Context, id uuid.UUID) (User, error)
	// Retrieve user by mobile
	// Fetches a user by mobile, excluding soft-deleted users.
	// Parameters: mobile
	WhoIsBMobile(ctx context.Context, mobile string) (User, error)
}

var _ Querier = (*Queries)(nil)
